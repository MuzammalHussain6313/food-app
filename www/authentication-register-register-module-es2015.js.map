{"version":3,"sources":["./src/app/authentication/register/register.page.html","./src/app/authentication/register/register.module.ts","./src/app/authentication/register/register.page.scss","./src/app/authentication/register/register.page.ts"],"names":[],"mappings":"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","file":"authentication-register-register-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n    <ion-toolbar color=\\\"primary\\\">\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>Sign Up</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <form [formGroup]=\\\"registerForm\\\">\\n        <ion-grid>\\n            <ion-row color=\\\"justify-content-center\\\">\\n                <ion-col class=\\\"ion-align-self-center\\\" size-md=\\\"6\\\" size-lg=\\\"5\\\" size-xs=\\\"12\\\">\\n                    <div class=\\\"ion-text-center\\\">\\n                        <h3>Create your account!</h3>\\n                    </div>\\n                    <div class=\\\"ion-padding\\\">\\n                        <ion-item>\\n                            <ion-input name=\\\"firstName\\\" formControlName=\\\"first_name\\\" type=\\\"text\\\" placeholder=\\\"First Name\\\"></ion-input>\\n                        </ion-item>\\n                        <div>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerFormControl.first_name.touched && registerFormControl.first_name.errors?.required\\\">First name required.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerFormControl.first_name.touched && registerFormControl.first_name.errors?.pattern\\\">Enter only Alphabets.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('first_name').hasError('minlength')\\\">Enter at least 3 charecters.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('first_name').hasError('maxlength')\\\">Enter 20 charecters maximum.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.first_name.errors?.required\\\">First name required.</span>\\n                        </div>\\n                        <ion-item>\\n                            <ion-input name=\\\"lastName\\\" formControlName=\\\"last_name\\\" type=\\\"text\\\" placeholder=\\\"Last Name\\\"></ion-input>\\n                        </ion-item>\\n                        <div>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerFormControl.last_name.touched && registerFormControl.last_name.errors?.required\\\">First name required.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerFormControl.last_name.touched && registerFormControl.last_name.errors?.pattern\\\">Enter only Alphabets.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('last_name').hasError('minlength')\\\">Enter at least 3 charecters.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('last_name').hasError('maxlength')\\\">Enter 20 charecters maximum.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.last_name.errors?.required\\\">Last name required.</span>\\n                        </div>\\n                        <ion-item>\\n                            <ion-input (focusout)=\\\"onFoucusOut()\\\" (keyup)=\\\"removeError()\\\" (change)=\\\"checkEmail()\\\" name=\\\"email\\\" formControlName=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"your@email.com\\\"></ion-input>\\n                            <ion-spinner color=\\\"secondary\\\" name=\\\"lines\\\" *ngIf=\\\"mailloading\\\"></ion-spinner>\\n                        </ion-item>\\n                        <div *ngIf=\\\"emailVerification\\\">\\n                            <span class=\\\"text-danger\\\">User with that email is already exists.<br> Enter another email</span>\\n                        </div>\\n                        <div *ngIf=\\\"emailEmptyCheck\\\">\\n                            <span class=\\\"text-danger\\\">You can't enter only white space.</span>\\n                        </div>\\n                        <div>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.email.errors?.required\\\">Email is required.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('email').hasError('pattern')\\\">You can enter alphabets numeric value and spacial character and dot.</span>\\n                        </div>\\n                        <ion-item>\\n                            <ion-input (focusout)=\\\"onFoucusOutUsername()\\\" (keyup)=\\\"removeErrorUsername()\\\" (change)=\\\"checkUsername()\\\" name=\\\"username\\\" formControlName=\\\"user_name\\\" type=\\\"text\\\" placeholder=\\\"username\\\"></ion-input>\\n                        </ion-item>\\n                        <div *ngIf=\\\"usernameVerification\\\">\\n                            <span class=\\\"text-danger\\\">User with that username is already exists.<br> Enter another username</span>\\n                        </div>\\n                        <div *ngIf=\\\"usernameEmptyCheck\\\">\\n                            <span class=\\\"text-danger\\\">You can't enter only white space.</span>\\n                        </div>\\n                        <div>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.user_name.errors?.required\\\">username is required.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('user_name').hasError('pattern')\\\">You can enter alphabets numeric value for username.</span>\\n                        </div>\\n                        <ion-item>\\n                            <ion-input placeholder=\\\"Password\\\" formControlName=\\\"password\\\" [type]=\\\"passwordType\\\" clearOnEdit=\\\"false\\\"></ion-input>\\n                            <ion-icon item-end [name]=\\\"passwordIcon\\\" class=\\\"passwordIcon\\\" (click)='hideShowPassword()'></ion-icon>\\n                        </ion-item>\\n                        <div>\\n                            <ion-label class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.password.errors?.required\\\">password is required.</ion-label>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('password').hasError('minlength')\\\">Minimum length of password should 5.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerForm.get('password').hasError('pattern')\\\">Enter alpha numeric value for password.</span>\\n                        </div>\\n                        <ion-item>\\n                            <ion-input (keyup)=\\\"removePasswordMatchError()\\\" (focusout)=\\\"matchPasswords()\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirm_password\\\" [type]=\\\"passwordType\\\" clearOnEdit=\\\"false\\\"></ion-input>\\n                            <ion-icon item-end [name]=\\\"passwordIcon\\\" class=\\\"passwordIcon\\\" (click)='hideShowPassword()'></ion-icon>\\n                        </ion-item>\\n                        <div>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.confirm_password.errors?.required\\\">confirm password is required.</span>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"registerFormControl.confirm_password.touched && registerForm.get('confirm_password').hasError('mismatchedPasswords')\\\">Password and confirm password should match.</span>\\n                        </div>\\n                        <div *ngIf=\\\"passwordMatch\\\">\\n                            <span class=\\\"text-danger\\\">Password and confirm password should match.</span>\\n                        </div>\\n                        <ion-item>\\n                            <ion-label position=\\\"floating\\\">User Role</ion-label>\\n                            <ion-select value=\\\"Donner\\\" formControlName=\\\"role\\\" placeholder=\\\"--Select--\\\" okText=\\\"Okay\\\" cancelText=\\\"Dismiss\\\">\\n                                <ion-select-option value=\\\"donner\\\">Donner</ion-select-option>\\n                                <ion-select-option value=\\\"charity house\\\">Charity House</ion-select-option>\\n                            </ion-select>\\n                        </ion-item>\\n                        <div>\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"submitted && registerFormControl.role.errors?.required\\\">Please ! select your user role.</span>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"ion-padding\\\">\\n                        <ion-button size=\\\"large\\\" (click)=\\\"loadForm()\\\" color=\\\"primary\\\" type=\\\"submit\\\" expand=\\\"block\\\">Proceed  &nbsp;&nbsp;&nbsp;<ion-spinner name=\\\"lines\\\" *ngIf=\\\"loading\\\"></ion-spinner></ion-button>\\n                    </div>\\n                </ion-col>\\n            </ion-row>\\n        </ion-grid>\\n    </form>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        RouterModule.forChild(routes),\n        ReactiveFormsModule,\n    ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","module.exports = \".passwordIcon {\\n  font-size: 2rem !important;\\n  position: relative !important;\\n  top: 0px !important;\\n  margin: 0 auto !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aGVudGljYXRpb24vcmVnaXN0ZXIvQzpcXFVzZXJzXFxVc2VyXFxEb2N1bWVudHNcXEdpdEh1YlxcZm9vZC1hcHAvc3JjXFxhcHBcXGF1dGhlbnRpY2F0aW9uXFxyZWdpc3RlclxccmVnaXN0ZXIucGFnZS5zY3NzIiwic3JjL2FwcC9hdXRoZW50aWNhdGlvbi9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSwwQkFBQTtFQUNBLDZCQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtBQ0NGIiwiZmlsZSI6InNyYy9hcHAvYXV0aGVudGljYXRpb24vcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhc3N3b3JkSWNvbntcclxuICBmb250LXNpemU6MnJlbSAhaW1wb3J0YW50O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZSAhaW1wb3J0YW50O1xyXG4gIHRvcDogMHB4ICFpbXBvcnRhbnQ7XHJcbiAgbWFyZ2luOiAwIGF1dG8gIWltcG9ydGFudDtcclxufVxyXG4iLCIucGFzc3dvcmRJY29uIHtcbiAgZm9udC1zaXplOiAycmVtICFpbXBvcnRhbnQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZSAhaW1wb3J0YW50O1xuICB0b3A6IDBweCAhaW1wb3J0YW50O1xuICBtYXJnaW46IDAgYXV0byAhaW1wb3J0YW50O1xufSJdfQ== */\"","import {Component, OnInit} from '@angular/core';\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable, Subscription} from 'rxjs';\nimport {PopoverComponent} from '../../admin/popover/popover.component';\nimport {isNullOrUndefined} from 'util';\nimport {ListService} from '../../list.service';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.page.html',\n    styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n    constructor(\n        private router: Router,\n        private http: HttpClient,\n        private service: ListService,\n        private formBuilder: FormBuilder\n    ) {\n    }\n\n    get registerFormControl() {\n        return this.registerForm.controls;\n    }\n\n    registerForm: FormGroup;\n    passwordType = 'password';\n    passwordIcon = 'eye-off';\n    loading: boolean;\n    submitted = false;\n    obj1;\n    obj2;\n    results: any;\n    donnerList;\n    mailloading: boolean;\n    usernameVerification = false;\n    usernameEmptyCheck = false;\n    emailVerification = false;\n    emailEmptyCheck = false;\n    passwordMatch = false;\n    ngOnInit() {\n        this.formInitializer();\n        // this.loading = true;\n    }\n\n    hideShowPassword() {\n        this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n        this.passwordIcon = this.passwordIcon === 'eye-off' ? 'eye' : 'eye-off';\n    }\n\n    formInitializer() {\n        const EMAILPATTERN = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n        this.registerForm = this.formBuilder.group({\n            first_name: [null, [Validators.required, Validators.pattern('[a-zA-Z ]*'), Validators.minLength(3), Validators.maxLength(20)]],\n            last_name: [null, [Validators.required, Validators.pattern('[a-zA-Z ]*'), Validators.minLength(3), Validators.maxLength(20)]],\n            email: [null, [Validators.required, Validators.pattern(EMAILPATTERN)]],\n            user_name: [null, [Validators.required, Validators.pattern('^(?=.*[a-zA-Z])[a-zA-Z0-9]+$')]],\n            role: [null, [Validators.required]],\n            password: ['', Validators.compose([Validators.required, Validators.minLength(5)])],\n            confirm_password: [\n                '',\n                [\n                    Validators.required,\n                    // this.mismatchedPasswords('password')\n                ]\n            ]\n        });\n    }\n\n    mismatchedPasswords(otherControlName: string) {\n        return (control: AbstractControl): { [key: string]: any } => {\n            const otherControl: AbstractControl = control.root.get(otherControlName);\n\n            if (otherControl) {\n                const subscription: Subscription = otherControl.valueChanges.subscribe(\n                    () => {\n                        control.updateValueAndValidity();\n                        subscription.unsubscribe();\n                    }\n                );\n            }\n            return otherControl && control.value !== otherControl.value\n                ? {match: true}\n                : null;\n        };\n    }\n\n    loadForm() {\n        this.submitted = true;\n        this.loading = true;\n        if (!this.registerForm.valid) {\n            alert('Please provide all the required valid values!');\n            return false;\n        } else {\n            const data = this.registerForm.value;\n            if (data.role === 'donner') {\n                console.log('formData', this.registerForm.value);\n                const userData = this.registerForm.value;\n                alert(userData.role);\n                this.loading = false;\n                this.router.navigate(['register-donner', userData]);\n            }\n            if (data.role === 'charity house') {\n                console.log('formData', this.registerForm.value);\n                const userData = this.registerForm.value;\n                this.loading = false;\n                this.router.navigate(['register-charity-house', userData]);\n                // alert(formData.role);\n                // this.obj1 = '1';\n                // this.obj2 = '2';\n                // const fullID = '{ \"obj2\" : \"' + this.obj2 + '\", \"obj1\" : \"' + this.obj1 + '\" } ';\n                // const t = JSON.parse(fullID);\n                // console.log('full Object', t);\n            }\n        }\n    }\n    onSubmit() {\n        this.submitted = true;\n        if (this.registerForm.valid) {\n            alert('Form Submitted succesfully!!!\\n Check the values in browser console.');\n            console.table(this.registerForm.value);\n        }\n    }\n    async checkEmail() {\n        this.mailloading = true;\n        const test = this.registerForm.value;\n        const item = test.email;\n        console.log('test', test);\n        console.log('email', item);\n        if (item) {\n            this.http.get(`${this.service.homeUrl}/users/email/${item}`,\n                {observe: 'response'}).subscribe(response => {\n                if (response.status === 200 || response.status === 201) {\n                    console.log('response', response);\n                    const tester = response.body;\n                    console.log('tester', tester.toString());\n                    if ( tester.toString() === 'false') {\n                        this.emailVerification = true;\n                        this.mailloading = false;\n                    }\n                    this.mailloading = false;\n                    // this.donnerList = response.body;\n                    // console.log('content', this.donnerList);\n                    // this.results = this.donnerList.content;\n                }\n            }, (error) => {\n                console.log('error.', error);\n            });\n            this.mailloading = false;\n        }\n        this.mailloading = false;\n    }\n    onFoucusOut() {\n        const test = this.registerForm.value;\n        const item = test.email;\n        console.log('test', test);\n        console.log('email', item);\n        const str = '    ';\n        if (!str.replace(/\\s/g, '').length) {\n            // alert('str contains spaces.');\n        }\n        if ( item === '' || item == null) {\n            this.emailEmptyCheck = true;\n        }\n    }\n    removeError() {\n        this.emailVerification = false;\n        this.emailEmptyCheck = false;\n    }\n\n    async checkUsername() {\n        const test = this.registerForm.value;\n        const item = test.user_name;\n        console.log('test', test);\n        console.log('username', item);\n        if (item) {\n            this.http.get(`${this.service.homeUrl}/users/username/${item}`,\n                {observe: 'response'}).subscribe(response => {\n                if (response.status === 200 || response.status === 201) {\n                    console.log('response', response);\n                    const tester = response.body;\n                    console.log('tester', tester.toString());\n                    if ( tester.toString() === 'false') {\n                        this.usernameVerification = true;\n                        this.loading = false;\n                    }\n                    this.loading = false;\n                    // this.donnerList = response.body;\n                    // console.log('content', this.donnerList);\n                    // this.results = this.donnerList.content;\n                }\n            }, (error) => {\n                console.log('error.', error);\n            });\n            this.loading = false;\n        }\n    }\n\n    onFoucusOutUsername() {\n        const test = this.registerForm.value;\n        const item = test.user_name;\n        console.log('test', test);\n        console.log('username', item);\n        const str = '    ';\n        if (!str.replace(/\\s/g, '').length) {\n            // alert('str contains spaces.');\n        }\n        if ( item === '' || item == null) {\n            this.usernameEmptyCheck = true;\n        }\n    }\n    removeErrorUsername() {\n        this.usernameVerification = false;\n        this.usernameEmptyCheck = false;\n    }\n    matchPasswords() {\n        const data = this.registerForm.value;\n        if (data.password === data.confirm_password) {\n            this.passwordMatch =  false;\n        } else {\n            this.passwordMatch = true;\n        }\n    }\n    removePasswordMatchError() {\n        this.passwordMatch = false;\n    }\n}\n"],"sourceRoot":""}